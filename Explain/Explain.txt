/* 1 */
id - Identifier fot each select query.

select_type - Type of select query, Example : SIMPLE, PRIMARY, DERIVED.

table - table referred to by the row.

type - how MySQL join the table used, Example : system, const, eq_ref, ALL.

possible_keys – shows the keys that can be used by MySQL to find rows from the table.

keys - indicates the actual index used by MySQL.

key_len - indicates the length of index Query Optimizer chose to use.

ref – Shows the columns or constants that are compared to the index named in the key column

rows – lists the number of records that were examined to produce the output.

filtered - Percentage of rows filtered by table condition.

Extra – contains additional information regarding the query execution plan. Example: using temporary, using filesort

/* 2 .1 */
This means that the sql is searching the whole table to find just one row with matching user_id which is not at all optimal.
/* 2.2 */
We can make user_id as a primary key which will eventually act as an index and optimize the query.

/* 3 */
The order of indexing should be commentable_id, commentable_type and user_id.

/* 4 */
Using JOIN
EXPLAIN SELECT Heading, Articles.Content, Comments.Content as Comments FROM Articles
INNER JOIN Authors
ON Articles.AuthorId = Authors.id
INNER JOIN Comments
ON Articles.id = Comments.ArticleId
WHERE Authors.Name = 'William Wordsford';

id	select_type	table	    partitions	type	possible_keys	    key	        key_len	ref	                rows	filtered	Extra
1	SIMPLE	    Authors	    NULL	    ALL	    PRIMARY	            NULL	    NULL	NULL	            3	    33.33	    Using where
1	SIMPLE	    Articles	NULL	    ref	    PRIMARY,AuthorId	AuthorId	18	    test.Authors.id	    1	    100.00	    NULL
1	SIMPLE	    Comments	NULL	    ref	    ArticleId	        ArticleId	19	    test.Articles.id	1	    100.00	    NULL

Nested Query
EXPLAIN SELECT Articles.Heading, Articles.Content, Comments.Content
FROM Articles, Comments
WHERE Articles.AuthorId = (
	SELECT id 
    FROM Authors 
    WHERE Name = 'William Wordsford'
)
AND
Comments.ArticleId IN (
	SELECT id FROM Articles WHERE AuthorId IN(
		SELECT id FROM Authors
        WHERE Name = 'William Wordsford'
	)
);

id	select_type table	    partitions	type	possible_keys	    key	        key_len	    ref	            rows	filtered	Extra
1	PRIMARY	    Authors	    NULL	    ALL	    PRIMARY	NULL	    NULL	    NULL	                    3	    33.33	Using where
1	PRIMARY	    Articles    NULL	    ref	    PRIMARY,AuthorId	AuthorId	18	        test.Authors.id	1	    100.00	Using index
1	PRIMARY	    Comments	NULL	    ref	    ArticleId	        ArticleId	19	        test.Articles.id1	    100.00	NULL
1	PRIMARY	    Articles	NULL	    ref	    AuthorId	        AuthorId	18	        const	        2	    100.00	Using where
2	SUBQUERY	Authors	    NULL	    ALL	    NULL	            NULL	    NULL	    NULL	        3	    33.33	Using where

Clearly the query written with JOIN statements is optimized.